-- Guilherme Cunha Prada 2019

local grid = {}

function grid.init(grid_width_n, grid_height_n, grid_size, lookahead)
	grid.grid_width_n = grid_width_n
	grid.grid_height_n = grid_height_n
	grid.grid_size = grid_size
	grid.lookahead = lookahead

	--grid.grid_types = {}
	grid.grid_directions = {}

	-- this matrix defines the map, it stores the tile type
	-- there are 16 variations! so we are goig to encode then with a number between
	-- 1 and 16 , we can get then with bits
	-- each bit representing an enabled direction in the order
	-- up, down, left, right

	grid.grid_types =   { --   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56
							{ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 }, --1
							{ 16,  5,  3,  3,  3,  3,  7,  3,  3,  3,  3,  3,  6, 16, 16,  5,  3,  3,  3,  3,  3,  7,  3,  3,  3,  3,  7,  3,  3,  7,  3,  3,  3,  3,  7,  3,  3,  3,  3,  3,  6, 16, 16,  5,  3,  3,  3,  3,  3,  7,  3,  3,  3,  3,  6, 16 }, --2
							{ 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --3
							{ 16, 12, 16,  0,  0, 16, 12, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0, 16, 12, 16,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0, 16, 12, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0, 16, 12, 16,  0,  0, 16, 12, 16 }, --4
							{ 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --5
							{ 16, 13,  3,  3,  3,  3, 15,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 15,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3, 15,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 15,  3,  3,  3,  3, 14, 16 }, --6
							{ 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --7
							{ 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --8
							{ 16,  9,  3,  3,  3,  3, 14, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16, 13,  3,  3,  3,  3, 11,  3,  3, 11,  3,  3,  3,  3, 14, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16, 13,  3,  3,  3,  3, 10, 16 }, --9
							{ 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16 }, --10
							{ 16, 16, 16, 16,  0, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16,  0, 16 }, --11
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16,  5,  3,  3, 11,  3,  3, 11,  3,  3,  6, 16, 16, 13,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 14, 16, 16,  5,  3,  3, 11,  3,  3, 11,  3,  3,  6, 16, 16, 12, 16, 16,  0,  0,  0, 16 }, --12
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16,  0,  0,  0, 16 }, --13
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0, 16, 16, 16, 16, 16, 16, 16, 16,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16,  0,  0,  0, 16 }, --14
							{ 16, 16, 16,  0,  0, 16, 13,  3,  3, 14, 16,  0,  0,  0,  0,  0,  0, 16, 13,  3,  3, 14, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 13,  3,  3, 14, 16, 16, 16, 16, 16,  0,  0, 16, 13,  3,  3, 14, 16, 16,  0,  0,  0, 16 }, --15
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0, 16, 16,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16,  0,  0,  0, 16 }, --16
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16,  0,  0,  0, 16 }, --17
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16, 13,  3,  3,  3,  3,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3,  3,  3,  3,  3, 14, 16, 16, 12, 16, 16,  0,  0,  0, 16 }, --18
							{ 16, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16,  0, 16 }, --19
							{ 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16 }, --20
							{ 16,  5,  3,  3,  3,  3, 15,  3,  3, 11,  3,  3,  6, 16, 16,  5,  3,  3, 11,  3,  3, 15,  3,  3,  3,  3,  7,  3,  3,  7,  3,  3,  3,  3, 15,  3,  3, 11,  3,  3,  6, 16, 16,  5,  3,  3, 11,  3,  3, 15,  3,  3,  3,  3,  6, 16 }, --21
							{ 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --22
							{ 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --23
							{ 16,  9,  3,  6, 16, 16, 13,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 14, 16, 16,  5,  3, 10, 16, 16,  9,  3,  6, 16, 16, 13,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 14, 16, 16,  5,  3, 10, 16 }, --24
							{ 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16 }, --25
							{ 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16 }, --26
							{ 16,  5,  3, 11,  3,  3, 10, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16,  9,  3,  3, 11,  3,  6, 16, 16,  5,  3, 11,  3,  3, 10, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16,  9,  3,  3, 11,  3,  6, 16 }, --27
							{ 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16 }, --28
							{ 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16 }, --29
							-- { 16,  9,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 15,  3,  3, 15,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 15,  3,  3, 15,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 15,  3,  3, 15,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 10, 16 }, --30
							-- { 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 }, --31
							-- { 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 }, --32
							-- { 16,  5,  3,  3,  3,  3,  7,  3,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3,  3,  7,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3,  7,  3,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3,  3,  7,  3,  3,  3,  3,  6, 16 }, --33
							-- { 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --34
							-- { 16, 12, 16,  0,  0, 16, 12, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0, 16, 12, 16,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0, 16, 12, 16,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0, 16, 12, 16,  0,  0, 16, 12, 16 }, --35
							-- { 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --35
							-- { 16, 13,  3,  3,  3,  3, 15,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 15,  3,  3,  3,  3, 14, 16, 16, 13,  3,  3,  3,  3, 15,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 15,  3,  3,  3,  3, 14, 16 }, --37
							-- { 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --38
							-- { 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --39
							-- { 16,  9,  3,  3,  3,  3, 14, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16, 13,  3,  3,  3,  3, 11,  3,  3, 11,  3,  3,  3,  3, 14, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16, 13,  3,  3,  3,  3, 10, 16 }, --40
							-- { 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 16 }, --41
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --42
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16,  5,  3,  3, 11,  3,  3, 11,  3,  3,  6, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16,  5,  3,  3, 11,  3,  3, 11,  3,  3,  6, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --43
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --44
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --45
							-- { 16,  0,  0,  0,  0, 16, 13,  3,  3, 14, 16,  0,  0,  0,  0,  0,  0, 16, 13,  3,  3, 14, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 13,  3,  3, 14, 16,  0,  0,  0,  0,  0,  0, 16, 13,  3,  3, 14, 16,  0,  0,  0,  0, 16 }, --46
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --47
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --48
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 13,  3,  3,  3,  3,  3,  3,  3,  3, 14, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 13,  3,  3,  3,  3,  3,  3,  3,  3, 14, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --49
							-- { 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16, 16,  0,  0,  0,  0, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16,  0,  0,  0,  0, 16 }, --50
							-- { 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16 }, --51
							-- { 16,  5,  3,  3,  3,  3, 15,  3,  3, 11,  3,  3,  6, 16, 16,  5,  3,  3, 11,  3,  3, 15,  3,  3,  3,  3,  7,  3,  3,  7,  3,  3,  3,  3, 15,  3,  3, 11,  3,  3,  6, 16, 16,  5,  3,  3, 11,  3,  3, 15,  3,  3,  3,  3,  6, 16 }, --52
							-- { 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --53
							-- { 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 12, 16, 16, 16, 16, 12, 16 }, --54
							-- { 16,  9,  3,  6, 16, 16, 13,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 14, 16, 16,  5,  3, 10, 16, 16,  9,  3,  6, 16, 16, 13,  3,  3,  7,  3,  3, 11,  3,  3, 11,  3,  3,  7,  3,  3, 14, 16, 16,  5,  3, 10, 16 }, --55
							-- { 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16 }, --56
							-- { 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 12, 16, 16, 16 }, --57
							-- { 16,  5,  3, 11,  3,  3, 10, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16,  9,  3,  3, 11,  3,  6, 16, 16,  5,  3, 11,  3,  3, 10, 16, 16,  9,  3,  3,  6, 16, 16,  5,  3,  3, 10, 16, 16,  9,  3,  3, 11,  3,  6, 16 }, --58
							-- { 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16 }, --59
							-- { 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 12, 16 }, --60
							{ 16,  9,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 11,  3,  3, 11,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 11,  3,  3, 11,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 11,  3,  3, 11,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 10, 16 }, --61
							{ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 }, --62
						}


	-- grid.grid_directions matrix is defined dinamicaly based on grid_types
	-- it stores the enabled movements for each cell
	--
	for i=1,grid_width_n do
		grid.grid_directions[i] = {}
		for j=1,grid_height_n do
			--print("logging")
			local tile_type = grid.grid_types[j][i] -- invertido
			-- daqui para frente a matriz é [pos_x][pos_y]

			if tile_type == 0 or tile_type == 16 then
				grid.grid_directions[i][j] =  {false, false, false, false}
			elseif tile_type == 3 then
				grid.grid_directions[i][j] =  {false, false, true, true}
			elseif tile_type == 5 then
				grid.grid_directions[i][j] =  {false, true, false, true}
			elseif tile_type == 6 then
				grid.grid_directions[i][j] =  {false, true, true, false}
			elseif tile_type == 7 then
				grid.grid_directions[i][j] =  {false, true, true, true}
			elseif tile_type == 9 then
				grid.grid_directions[i][j] =  {true, false, false, true}
			elseif tile_type == 10 then
				grid.grid_directions[i][j] =  {true, false, true, false}
			elseif tile_type == 11 then
				grid.grid_directions[i][j] =  {true, false, true, true}
			elseif tile_type == 12 then
				grid.grid_directions[i][j] =  {true, true, false, false}
			elseif tile_type == 13 then
				grid.grid_directions[i][j] =  {true, true, false, true}
			elseif tile_type == 14 then
				grid.grid_directions[i][j] =  {true, true, true, false}
			elseif tile_type == 15 then
				grid.grid_directions[i][j] =  {true, true, true, true}
			else
				grid.grid_directions[i][j] =  {false, false, false, false}
			end

		end
	end

	grid.grid_valid_pos = {}
	for i=1, grid_width_n do
		for j=1,grid_height_n do
			if (grid.grid_types[j][i]~= 16 and grid.grid_types[j][i]~= 0 and (j<=15 or j>=30)) then
				local value = {}
				value.x = i
				value.y = j
				table.insert(grid.grid_valid_pos, value)
			end
		end
	end
end

function grid.get_grid_center(obj, grid_size)
	-- returns the center of the grid obj lays, grid_size is the grid size
	local this_grid_size = grid_size or grid.grid_size
	center = {}
	center.x = (obj.grid_pos.x-1)*this_grid_size + math.ceil(this_grid_size/2)
	center.y = (obj.grid_pos.y-1)*this_grid_size + math.ceil(this_grid_size/2)
	return center
end

function grid.center_on_grid(obj, grid_size)
	-- centers obj on its own grid cell
	local this_grid_size = grid_size or grid.grid_size
	pos = grid.get_grid_pos(obj, grid_size)
	obj.x = (pos.x-1)*this_grid_size + math.ceil(this_grid_size/2)
	obj.y = (pos.y-1)*this_grid_size + math.ceil(this_grid_size/2)
end

function grid.center_on_grid_x(obj, grid_size)
	-- centers obj on its own grid cell x axis

	local this_grid_size = grid_size or grid.grid_size
	pos = grid.get_grid_pos(obj, this_grid_size)
	obj.x = (pos.x-1)*this_grid_size + math.ceil(this_grid_size/2)
end

function grid.center_on_grid_y(obj, grid_size)
	-- centers obj on its own grid cell y axis

	local this_grid_size = grid_size or grid.grid_size
	pos = grid.get_grid_pos(obj, this_grid_size)
	obj.y = (pos.y-1)*this_grid_size + math.ceil(this_grid_size/2)
end

function grid.get_dynamic_front(obj, lookahead)
	-- returns the point that is lookahead in front of the player
	-- it does consider the direction obj is set

	local this_lookahead = lookahead or grid.lookahead
	local point = {}
	-- the player has a dynamic center
	if obj.direction == "up" then
		point.y = obj.y - this_lookahead
 		point.x = obj.x
	elseif obj.direction == "down" then
		point.y = obj.y + this_lookahead
		point.x = obj.x
	elseif obj.direction == "left" then
		point.x = obj.x - this_lookahead
		point.y = obj.y
	elseif obj.direction == "right" then
		point.x = obj.x + this_lookahead
		point.y = obj.y
	else
		point.y = obj.y
		point.x = obj.x
	end
	return point
end

function grid.get_grid_pos(obj, grid_size)
	local this_grid_size = grid_size or grid.grid_size
	local grid_pos = {}
	if this_grid_size > 0 then
		grid_pos.x = math.floor(obj.x / this_grid_size) + 1--lua arrays start at 1
		grid_pos.y = math.floor(obj.y / this_grid_size) + 1 --lua arrays start at 1
		return grid_pos
	else
		print("error, grid_size has to be greater than 0")
		return nil
	end
	return grid_pos
end

function grid.is_grid_wall(x, y)
	if 	grid.grid_types[y][x] == 16 or
	 	grid.grid_types[y][x] == 0 then	return true end
	return false
end

function grid.is_grid_way(x, y)
	if 	grid.grid_types[y][x] ~= 16 and
		grid.grid_types[y][x] ~= 0 then return true end
	return false
end

function grid.is_corridorX(pos)
	if grid.grid_types[pos.y][pos.x] == 3 then return true end
	return false
end

function grid.is_corridorY(pos)
	if grid.grid_types[pos.y][pos.x] == 12 then return true end
	return false
end

function grid.is_corridor(pos)
	if ( grid.grid_types[pos.y][pos.x] == 12 or grid.grid_types[pos.y][pos.x] == 3 )then
		return true
	end
	return false
end

function grid.count_enabled_directions(pos)
	local count = 0
	local value = {}
	value = grid.grid_directions[pos.x][pos.y]
	for i=1, #value, 1 do
		if (value[i] == true) then
			count = count + 1
		end
	end
	return count
end

function grid.get_enabled_directions(grid_pos)
	local value = {}
	value = grid.grid_directions[grid_pos.x][grid_pos.y]
	return value
end

return grid